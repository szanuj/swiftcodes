// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlcout

import (
	"context"
	"database/sql"
)

const deleteSwiftCode = `-- name: DeleteSwiftCode :execresult
DELETE FROM swift_codes
WHERE swift_code = ?
`

func (q *Queries) DeleteSwiftCode(ctx context.Context, swiftCode string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSwiftCode, swiftCode)
}

const getCodeDetails = `-- name: GetCodeDetails :many
SELECT swift_code, address, bank_name, swift_codes.country_iso2, countries.country_name
FROM swift_codes LEFT JOIN countries ON swift_codes.country_iso2 = countries.country_iso2
WHERE swift_codes.swift_code = ?
UNION 
SELECT swift_code, address, bank_name, swift_codes.country_iso2, countries.country_name
FROM swift_codes LEFT JOIN countries ON swift_codes.country_iso2 = countries.country_iso2
WHERE RIGHT(?, 3) = "XXX"
AND LEFT(swift_code, 8) = LEFT(?, 8)
AND NOT RIGHT(swift_code, 3) = "XXX"
`

type GetCodeDetailsParams struct {
	SwiftCode string `json:"swiftCode"`
}

type GetCodeDetailsRow struct {
	SwiftCode   string         `json:"swiftCode"`
	Address     string         `json:"address"`
	BankName    string         `json:"bankName"`
	CountryISO2 string         `json:"countryISO2"`
	CountryName sql.NullString `json:"countryName"`
}

func (q *Queries) GetCodeDetails(ctx context.Context, arg GetCodeDetailsParams) ([]GetCodeDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCodeDetails, arg.SwiftCode, arg.SwiftCode, arg.SwiftCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCodeDetailsRow
	for rows.Next() {
		var i GetCodeDetailsRow
		if err := rows.Scan(
			&i.SwiftCode,
			&i.Address,
			&i.BankName,
			&i.CountryISO2,
			&i.CountryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCodeDetailsByCountryCode = `-- name: GetCodeDetailsByCountryCode :many
SELECT swift_code, address, bank_name, swift_codes.country_iso2
FROM swift_codes
WHERE country_iso2 = ?
`

func (q *Queries) GetCodeDetailsByCountryCode(ctx context.Context, countryIso2 string) ([]SwiftCode, error) {
	rows, err := q.db.QueryContext(ctx, getCodeDetailsByCountryCode, countryIso2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SwiftCode
	for rows.Next() {
		var i SwiftCode
		if err := rows.Scan(
			&i.SwiftCode,
			&i.Address,
			&i.BankName,
			&i.CountryISO2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountry = `-- name: GetCountry :one
SELECT country_iso2, country_name
FROM countries
WHERE country_iso2 = ?
`

func (q *Queries) GetCountry(ctx context.Context, countryIso2 string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountry, countryIso2)
	var i Country
	err := row.Scan(&i.CountryISO2, &i.CountryName)
	return i, err
}

const insertCountry = `-- name: InsertCountry :execresult
INSERT INTO countries (country_iso2, country_name)
VALUES (?, ?)
`

type InsertCountryParams struct {
	CountryISO2 string `json:"countryISO2"`
	CountryName string `json:"countryName"`
}

func (q *Queries) InsertCountry(ctx context.Context, arg InsertCountryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCountry, arg.CountryISO2, arg.CountryName)
}

const insertSwiftCode = `-- name: InsertSwiftCode :execresult
INSERT INTO swift_codes (swift_code, address, bank_name, country_iso2)
VALUES (?, ?, ?, ?)
`

type InsertSwiftCodeParams struct {
	SwiftCode   string `json:"swiftCode"`
	Address     string `json:"address"`
	BankName    string `json:"bankName"`
	CountryISO2 string `json:"countryISO2"`
}

func (q *Queries) InsertSwiftCode(ctx context.Context, arg InsertSwiftCodeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertSwiftCode,
		arg.SwiftCode,
		arg.Address,
		arg.BankName,
		arg.CountryISO2,
	)
}
